name: Azure Storage Account Module - Release

on:
  push:
    branches:
      - main
    paths:
      - 'modules/azurerm_storage_account/**'
  workflow_dispatch:

permissions:
  contents: write
  packages: write
  issues: write
  pull-requests: write

env:
  MODULE_NAME: azurerm_storage_account
  MODULE_PREFIX: SA

jobs:
  check-release:
    name: Check if Release Needed
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.check.outputs.should_release }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Check commits
        id: check
        run: |
          # Get commits that affect this module since last tag
          LAST_TAG=$(git tag -l "SAv*" | sort -V | tail -1 || echo "")
          
          if [[ -z "$LAST_TAG" ]]; then
            echo "No previous releases found"
            COMMITS=$(git log --oneline -- modules/${{ env.MODULE_NAME }}/)
          else
            echo "Last tag: $LAST_TAG"
            COMMITS=$(git log ${LAST_TAG}..HEAD --oneline -- modules/${{ env.MODULE_NAME }}/)
          fi
          
          if [[ -n "$COMMITS" ]]; then
            echo "Found commits affecting module:"
            echo "$COMMITS"
            echo "should_release=true" >> $GITHUB_OUTPUT
          else
            echo "No new commits affecting module"
            echo "should_release=false" >> $GITHUB_OUTPUT
          fi

  quality-checks:
    name: Pre-release Quality Checks
    runs-on: ubuntu-latest
    needs: check-release
    if: needs.check-release.outputs.should_release == 'true'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          path: module
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest
      
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
      
      - name: Install tools
        run: |
          # Install terraform-docs
          curl -sSLo ./terraform-docs.tar.gz https://github.com/terraform-docs/terraform-docs/releases/download/v0.17.0/terraform-docs-v0.17.0-linux-amd64.tar.gz
          tar -xzf terraform-docs.tar.gz
          chmod +x terraform-docs
          sudo mv terraform-docs /usr/local/bin/
          
          # Install tfsec
          curl -s https://raw.githubusercontent.com/aquasecurity/tfsec/master/scripts/install_linux.sh | bash
          sudo mv tfsec /usr/local/bin/
          
          # Install checkov
          pip install checkov
      
      - name: Terraform Format Check
        run: |
          cd module/modules/${{ env.MODULE_NAME }}
          if ! terraform fmt -check -recursive; then
            echo "❌ Terraform files are not formatted"
            exit 1
          fi
          echo "✅ Terraform formatting check passed"
      
      - name: Terraform Validation
        run: |
          cd module/modules/${{ env.MODULE_NAME }}
          terraform init -backend=false
          terraform validate
          echo "✅ Terraform validation passed"
      
      - name: Documentation Check
        run: |
          cd module/modules/${{ env.MODULE_NAME }}
          
          # Generate current docs
          terraform-docs markdown table . > README.md.tmp
          
          # Check if docs are up to date
          if ! diff -q README.md README.md.tmp > /dev/null 2>&1; then
            echo "❌ Documentation is not up to date"
            echo "Please run: terraform-docs markdown table . > README.md"
            exit 1
          fi
          
          rm README.md.tmp
          echo "✅ Documentation is up to date"
      
      - name: Security Scan
        run: |
          cd module/modules/${{ env.MODULE_NAME }}
          
          # Run tfsec
          echo "Running tfsec..."
          tfsec . --minimum-severity MEDIUM || true
          
          # Run checkov
          echo "Running checkov..."
          checkov -d . --framework terraform --soft-fail
          
          echo "✅ Security scans completed"
      
      - name: Run Tests
        id: tests
        run: |
          cd module/modules/${{ env.MODULE_NAME }}/tests
          
          if [[ -f go.mod ]]; then
            echo "Running Terratest..."
            go mod download
            go test -v -timeout 30m ./... | tee test-results.txt
            
            # Extract test coverage if available
            if grep -q "coverage:" test-results.txt; then
              coverage=$(grep "coverage:" test-results.txt | tail -1 | grep -oE '[0-9]+\.[0-9]+')
              echo "test_coverage=$coverage" >> $GITHUB_OUTPUT
              
              # Check if coverage meets threshold
              if (( $(echo "$coverage < 80" | bc -l) )); then
                echo "⚠️ Test coverage is below 80%: $coverage%"
              else
                echo "✅ Test coverage: $coverage%"
              fi
            fi
          else
            echo "⚠️ No Go tests found"
            echo "test_coverage=0" >> $GITHUB_OUTPUT
          fi
      
      - name: Example Validation
        run: |
          cd module/modules/${{ env.MODULE_NAME }}
          
          # Check simple example
          if [[ -d examples/simple ]]; then
            echo "Validating simple example..."
            cd examples/simple
            terraform init -backend=false
            terraform validate
            cd ../..
          fi
          
          # Check complete example
          if [[ -d examples/complete ]]; then
            echo "Validating complete example..."
            cd examples/complete
            terraform init -backend=false
            terraform validate
            cd ../..
          fi
          
          echo "✅ Examples validated successfully"

  semantic-release:
    name: Semantic Release
    runs-on: ubuntu-latest
    needs: [check-release, quality-checks]
    if: needs.check-release.outputs.should_release == 'true'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install semantic-release
        run: |
          npm install -g \
            semantic-release \
            @semantic-release/git \
            @semantic-release/github \
            @semantic-release/changelog \
            @semantic-release/exec \
            @semantic-release/commit-analyzer \
            @semantic-release/release-notes-generator \
            conventional-changelog-conventionalcommits
      
      - name: Create module archives
        run: |
          # This will be called by semantic-release exec plugin
          cat > create-archives.sh << 'EOF'
          #!/bin/bash
          VERSION=$1
          MODULE_NAME="${{ env.MODULE_NAME }}"
          
          # Create a clean archive of the module
          mkdir -p release
          cp -r modules/${MODULE_NAME} release/
          
          # Remove unnecessary files
          find release/${MODULE_NAME} -name ".terraform*" -type d -exec rm -rf {} + 2>/dev/null || true
          find release/${MODULE_NAME} -name "*.tfstate*" -type f -delete 2>/dev/null || true
          find release/${MODULE_NAME} -name ".DS_Store" -type f -delete 2>/dev/null || true
          find release/${MODULE_NAME} -name ".git*" -type f -delete 2>/dev/null || true
          
          # Create archives
          cd release
          tar -czf ../${MODULE_NAME}-${VERSION}.tar.gz ${MODULE_NAME}
          zip -r ../${MODULE_NAME}-${VERSION}.zip ${MODULE_NAME}
          cd ..
          
          # Cleanup
          rm -rf release
          EOF
          
          chmod +x create-archives.sh
      
      - name: Run semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GIT_AUTHOR_NAME: github-actions[bot]
          GIT_AUTHOR_EMAIL: github-actions[bot]@users.noreply.github.com
          GIT_COMMITTER_NAME: github-actions[bot]
          GIT_COMMITTER_EMAIL: github-actions[bot]@users.noreply.github.com
        run: |
          cd modules/${{ env.MODULE_NAME }}
          
          # Update exec plugin to create archives
          cat > .releaserc.json << 'EOF'
          {
            "branches": ["main"],
            "tagFormat": "SAv${version}",
            "plugins": [
              [
                "@semantic-release/commit-analyzer",
                {
                  "preset": "conventionalcommits",
                  "releaseRules": [
                    {"type": "feat", "release": "minor"},
                    {"type": "fix", "release": "patch"},
                    {"type": "perf", "release": "patch"},
                    {"type": "revert", "release": "patch"},
                    {"type": "docs", "scope": "README", "release": "patch"},
                    {"type": "refactor", "release": "patch"},
                    {"type": "chore", "release": false},
                    {"breaking": true, "release": "major"}
                  ]
                }
              ],
              [
                "@semantic-release/release-notes-generator",
                {
                  "preset": "conventionalcommits",
                  "presetConfig": {
                    "types": [
                      {"type": "feat", "section": "🚀 Features"},
                      {"type": "fix", "section": "🐛 Bug Fixes"},
                      {"type": "perf", "section": "⚡ Performance Improvements"},
                      {"type": "revert", "section": "⏪ Reverts"},
                      {"type": "docs", "section": "📚 Documentation"},
                      {"type": "refactor", "section": "♻️ Code Refactoring"},
                      {"type": "test", "section": "✅ Tests"},
                      {"type": "build", "section": "📦 Build System"},
                      {"type": "ci", "section": "👷 CI/CD"}
                    ]
                  }
                }
              ],
              [
                "@semantic-release/changelog",
                {
                  "changelogFile": "CHANGELOG.md"
                }
              ],
              [
                "@semantic-release/exec",
                {
                  "prepareCmd": "../../create-archives.sh ${nextRelease.version}"
                }
              ],
              [
                "@semantic-release/git",
                {
                  "assets": ["CHANGELOG.md"],
                  "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
                }
              ],
              [
                "@semantic-release/github",
                {
                  "assets": [
                    {
                      "path": "../../${{ env.MODULE_NAME }}-*.tar.gz",
                      "name": "${{ env.MODULE_NAME }}-${version}.tar.gz",
                      "label": "Module Archive (tar.gz)"
                    },
                    {
                      "path": "../../${{ env.MODULE_NAME }}-*.zip",
                      "name": "${{ env.MODULE_NAME }}-${version}.zip",
                      "label": "Module Archive (zip)"
                    }
                  ]
                }
              ]
            ]
          }
          EOF
          
          # Run semantic-release
          npx semantic-release