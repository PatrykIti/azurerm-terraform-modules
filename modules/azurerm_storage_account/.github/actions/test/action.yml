name: 'Test Storage Account Module'
description: 'Tests the Azure Storage Account Terraform module'

inputs:
  azure-credentials:
    description: 'Azure credentials for testing'
    required: true
  terraform-version:
    description: 'Terraform version to use'
    required: false
    default: '1.10.3'

runs:
  using: 'composite'
  steps:
    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
        
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ inputs.terraform-version }}
        terraform_wrapper: false
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/go/pkg/mod
          ~/.cache/go-build
        key: go-${{ runner.os }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          go-${{ runner.os }}-
    
    - name: Configure Azure Credentials
      shell: bash
      run: |
        # Set Azure credentials if provided
        if [[ -n "${{ inputs.azure-credentials }}" ]]; then
          CREDS='${{ inputs.azure-credentials }}'
          echo "ARM_CLIENT_ID=$(echo "$CREDS" | jq -r '.clientId')" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=$(echo "$CREDS" | jq -r '.tenantId')" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=$(echo "$CREDS" | jq -r '.subscriptionId')" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=$(echo "$CREDS" | jq -r '.clientSecret')" >> $GITHUB_ENV
          echo "AZURE_CLIENT_ID=$(echo "$CREDS" | jq -r '.clientId')" >> $GITHUB_ENV
          echo "AZURE_TENANT_ID=$(echo "$CREDS" | jq -r '.tenantId')" >> $GITHUB_ENV
          echo "AZURE_SUBSCRIPTION_ID=$(echo "$CREDS" | jq -r '.subscriptionId')" >> $GITHUB_ENV
          echo "AZURE_CLIENT_SECRET=$(echo "$CREDS" | jq -r '.clientSecret')" >> $GITHUB_ENV
          echo "ARM_USE_OIDC=true" >> $GITHUB_ENV
        fi

    - name: Run Tests
      shell: bash
      working-directory: ./modules/azurerm_storage_account/tests
      run: |
        # Initialize go modules if go.sum doesn't exist
        if [[ ! -f "go.sum" ]]; then
          echo "go.sum not found, running go mod tidy..."
          go mod tidy
        fi
        
        go mod download
        
        # Determine test type based on event and inputs
        TEST_TYPE="short"
        
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          TEST_TYPE="${{ github.event.inputs.test_type || 'short' }}"
        elif [[ "${{ github.event_name }}" == "push" ]]; then
          TEST_TYPE="full"
        fi
        
        case "$TEST_TYPE" in
          short)
            echo "Running short tests..."
            go test -v -timeout 30m -parallel 8 -short
            ;;
          full)
            echo "Running all tests..."
            go test -v -timeout 60m -parallel 8
            ;;
          integration-only)
            echo "Running only integration tests..."
            go test -v -timeout 60m -parallel 8 -run "Integration|Lifecycle|Disaster|Compliance|Monitoring|Scaling"
            ;;
        esac
        
    - name: Test Examples
      shell: bash
      env:
        ARM_USE_OIDC: true
        ARM_CLIENT_ID: ${{ fromJSON(inputs.azure-credentials).clientId }}
        ARM_TENANT_ID: ${{ fromJSON(inputs.azure-credentials).tenantId }}
        ARM_SUBSCRIPTION_ID: ${{ fromJSON(inputs.azure-credentials).subscriptionId }}
      run: |
        echo "Testing examples..."
        cd ./modules/azurerm_storage_account/examples
        
        # Test simple example
        if [[ -d "simple" ]]; then
          echo "Testing simple example..."
          cd simple
          terraform init
          terraform plan -out=tfplan
          cd ..
        fi