# Task ID: 18
# Title: Enhance Storage Account Module with Additional Parameters and Fixes
# Status: done
# Dependencies: 6
# Priority: high
# Description: Update the `azurerm_storage_account` module to support new features by adding missing parameters (e.g., HNS, SFTP, OAuth) and complex configuration blocks (e.g., SAS policy, immutability). This task also includes fixes for validation rules on existing parameters.
# Details:
This task involves a significant feature expansion of the Storage Account module. 

**High Priority Parameters:**
Add the following optional arguments to the `azurerm_storage_account` resource in `main.tf`, controlled by new variables in `variables.tf` with `null` defaults:
- `is_hns_enabled` (bool)
- `cross_tenant_replication_enabled` (bool)
- `default_to_oauth_authentication` (bool)
- `sftp_enabled` (bool)
- `nfsv3_enabled` (bool)
- `allowed_copy_scope` (string)
- `queue_encryption_key_type` (string)
- `table_encryption_key_type` (string)
- `local_user_enabled` (bool)
- `edge_zone` (string)
- `large_file_share_enabled` (bool)

**Medium Priority Blocks:**
Implement support for the following nested blocks using dynamic blocks and complex object variables:
- `immutability_policy`: Define a variable `var.immutability_policy` of type object to configure the policy.
- `sas_policy`: Define `var.sas_policy` to set expiration and type.
- `routing`: Define `var.routing` to manage routing preferences.
- `custom_domain`: Define `var.custom_domain` to associate a custom domain.
- `share_properties`: Define `var.share_properties` to configure SMB settings like `smb_multichannel_enabled`.

**Validation Fixes:**
1. In `variables.tf`, locate the `min_tls_version` variable and update its `validation` block to include 'TLS1_0', 'TLS1_1', and 'TLS1_2' in the list of allowed values.
2. Locate the `access_tier` variable and update its `validation` block to add 'Premium' to the allowed values. Note that 'Premium' is only valid for specific `account_kind` values, which should be documented.

# Test Strategy:
1. **Validation Fix:** Update an existing example to set `min_tls_version = "TLS1_1"` and verify a successful `terraform apply`. Create a new example for a premium block blob storage account (`account_kind = "BlockBlobStorage"`, `account_tier = "Premium"`) and verify it deploys successfully.
2. **High-Priority Parameters:** Update the `complete` example to enable SFTP (`sftp_enabled = true`) and Hierarchical Namespace (`is_hns_enabled = true`). Deploy the example and verify in the Azure Portal that the storage account is configured as a Data Lake Gen2 with SFTP enabled.
3. **Medium-Priority Blocks:** Create a new example (`examples/storage_account/advanced-policies`) that defines variables for `sas_policy` and `share_properties`. Deploy and use Azure CLI or the Portal to confirm that the SAS policy (e.g., expiration period) and the SMB share properties are correctly set on the deployed account.
4. **Regression:** Execute all existing examples for the storage account module to ensure that these additions do not break existing functionality for users who do not specify the new variables.

# Subtasks:
## 1. Fix Validation for min_tls_version and access_tier Parameters [done]
### Dependencies: None
### Description: Update the validation rules for `min_tls_version` and `access_tier` variables in `variables.tf` to include newly supported values and improve documentation.
### Details:
1. Open the `variables.tf` file for the module.
2. Locate the `min_tls_version` variable definition.
3. Modify its `validation` block's `condition` to include 'TLS1_0', 'TLS1_1', and 'TLS1_2' in the list of allowed values. The condition should look like: `can(regex("^(TLS1_0|TLS1_1|TLS1_2)$"), var.min_tls_version))`. 
4. Locate the `access_tier` variable definition.
5. Modify its `validation` block's `condition` to add 'Premium' to the list of allowed values. The condition should look like: `can(regex("^(Hot|Cool|Premium)$"), var.access_tier))`. 
6. Add a comment to the `description` of the `access_tier` variable stating that 'Premium' is only valid for `account_kind` values 'BlockBlobStorage' and 'FileStorage'.
<info added on 2025-07-06T18:56:01.916Z>
MANDATORY requirement: Before starting this subtask, review CLAUDE.md sections: important-instruction-reminders (lines 5-9), and section 9: Terraform Best Practices Guide (lines 112-122) for variable design patterns and validation rules. Key principles: Do what has been asked; nothing more, nothing less. ALWAYS prefer editing existing files. NEVER create new files.
</info added on 2025-07-06T18:56:01.916Z>

## 2. Add Data Lake Gen2 and Protocol Support Parameters [done]
### Dependencies: None
### Description: Implement support for Data Lake Gen2 (HNS), SFTP, NFSv3, and local user access by adding the corresponding optional boolean parameters to the module.
### Details:
1. In `variables.tf`, declare the following new variables with `type = bool` and `default = null`:
   - `is_hns_enabled`
   - `sftp_enabled`
   - `nfsv3_enabled`
   - `local_user_enabled`
2. In `main.tf`, update the `azurerm_storage_account` resource block to include these new arguments, assigning them their corresponding variable values (e.g., `is_hns_enabled = var.is_hns_enabled`).
<info added on 2025-07-06T18:56:21.034Z>
MANDATORY: Before starting this subtask, review CLAUDE.md sections: important-instruction-reminders (lines 5-9) and section 9: Terraform Best Practices Guide (lines 112-122) for variable design patterns. Key principles: Do what has been asked; nothing more, nothing less. ALWAYS prefer editing existing files. NEVER create new files. Follow variable naming conventions and use appropriate defaults (null for optional parameters).
</info added on 2025-07-06T18:56:21.034Z>

## 3. Add Security Control Parameters for Replication, Auth, and Copy Scope [done]
### Dependencies: None
### Description: Enhance security options by adding parameters for cross-tenant replication, OAuth authentication default, and allowed copy scope.
### Details:
1. In `variables.tf`, declare the following new variables with `default = null`:
   - `cross_tenant_replication_enabled` (type = bool)
   - `default_to_oauth_authentication` (type = bool)
   - `allowed_copy_scope` (type = string)
2. In `main.tf`, update the `azurerm_storage_account` resource block to include these new arguments, assigning them their corresponding variable values (e.g., `cross_tenant_replication_enabled = var.cross_tenant_replication_enabled`).
<info added on 2025-07-06T18:56:33.465Z>
MANDATORY: Before starting this subtask, review CLAUDE.md sections: important-instruction-reminders (lines 5-9) and section 9: Terraform Best Practices Guide (lines 112-122), especially the security best practices section. Key principles: Do what has been asked; nothing more, nothing less. ALWAYS prefer editing existing files. NEVER create new files. Follow security best practices when implementing authentication and access control parameters.
</info added on 2025-07-06T18:56:33.465Z>

## 4. Add Encryption Key Type Parameters for Queues and Tables [done]
### Dependencies: None
### Description: Add optional string parameters to specify the encryption key type ('Service' or 'Account') for queue and table services.
### Details:
1. In `variables.tf`, declare the following new variables with `type = string` and `default = null`:
   - `queue_encryption_key_type`
   - `table_encryption_key_type`
2. Add a `validation` block to each new variable to ensure the value is one of 'Service' or 'Account'. Example condition: `var.queue_encryption_key_type == null || contains(["Service", "Account"], var.queue_encryption_key_type)`.
3. In `main.tf`, update the `azurerm_storage_account` resource block to include the `queue_encryption_key_type` and `table_encryption_key_type` arguments, assigning them their corresponding variable values.
<info added on 2025-07-06T18:56:52.061Z>
MANDATORY: Before starting this subtask, review CLAUDE.md sections: important-instruction-reminders (lines 5-9) and section 9: Terraform Best Practices Guide (lines 112-122) for variable design patterns and validation. Key principles: Do what has been asked; nothing more, nothing less. ALWAYS prefer editing existing files. NEVER create new files. Use proper validation blocks to ensure parameters only accept valid values (Service or Account).
</info added on 2025-07-06T18:56:52.061Z>

## 5. Add Infrastructure Parameters for Large File Shares and Edge Zone [done]
### Dependencies: None
### Description: Implement support for enabling large file shares and specifying an edge zone for the storage account deployment.
### Details:
1. In `variables.tf`, declare the following new variables with `default = null`:
   - `large_file_share_enabled` (type = bool)
   - `edge_zone` (type = string)
2. In `main.tf`, update the `azurerm_storage_account` resource block to include the `large_file_share_enabled` and `edge_zone` arguments, assigning them their corresponding variable values.
<info added on 2025-07-06T18:57:09.355Z>
Before starting this subtask, MANDATORY review CLAUDE.md sections: important-instruction-reminders (lines 5-9), section 9: Terraform Best Practices Guide (lines 112-122) for variable design patterns. Key principles: Do what has been asked; nothing more, nothing less. ALWAYS prefer editing existing files. NEVER create new files. Infrastructure parameters should use null defaults to maintain backward compatibility.
</info added on 2025-07-06T18:57:09.355Z>

## 6. Implement Immutability Policy and SAS Policy Configuration Blocks [done]
### Dependencies: None
### Description: Add support for configuring container immutability and account-level SAS policies using dynamic blocks based on new object variables.
### Details:
1. In `variables.tf`, define `var.immutability_policy` with type `object({ allow_protected_append_writes = bool, period_in_days = number })` and `default = null`.
2. In `variables.tf`, define `var.sas_policy` with type `object({ expiration_period = string, expiration_action = string })` and `default = null`.
3. In `main.tf`, within the `azurerm_storage_account` resource, add a `dynamic "immutability_policy"` block. Use `for_each = var.immutability_policy != null ? [var.immutability_policy] : []`. Inside `content`, map the object attributes to the block arguments.
4. In `main.tf`, add a `dynamic "sas_policy"` block. Use `for_each = var.sas_policy != null ? [var.sas_policy] : []`. Inside `content`, map the object attributes.
<info added on 2025-07-06T18:57:29.284Z>
Before starting this subtask, MANDATORY review CLAUDE.md sections: important-instruction-reminders (lines 5-9), section 9: Terraform Best Practices Guide (lines 112-122) especially variable design patterns for complex objects. Key principles: Do what has been asked; nothing more, nothing less. ALWAYS prefer editing existing files. NEVER create new files. Use object types for grouping related parameters logically as suggested by user.
</info added on 2025-07-06T18:57:29.284Z>

## 7. Implement Routing and Custom Domain Configuration Blocks [done]
### Dependencies: None
### Description: Add support for configuring routing preferences and custom domains using dynamic blocks based on new object variables.
### Details:
1. In `variables.tf`, define `var.routing` with type `object({ choice = string, publish_internet_endpoints = bool, publish_microsoft_endpoints = bool })` and `default = null`.
2. In `variables.tf`, define `var.custom_domain` with type `object({ name = string, use_subdomain_name = optional(bool) })` and `default = null`.
3. In `main.tf`, within the `azurerm_storage_account` resource, add a `dynamic "routing"` block. Use `for_each = var.routing != null ? [var.routing] : []`. Map attributes in the `content` block.
4. In `main.tf`, add a `dynamic "custom_domain"` block. Use `for_each = var.custom_domain != null ? [var.custom_domain] : []`. Map attributes in the `content` block.
<info added on 2025-07-06T18:57:42.746Z>
MANDATORY: Before starting this subtask, review CLAUDE.md sections: important-instruction-reminders (lines 5-9) and section 9: Terraform Best Practices Guide (lines 112-122), especially regarding variable design patterns for complex objects. Key principles: Do what has been asked; nothing more, nothing less. ALWAYS prefer editing existing files. NEVER create new files. Use object types with optional() for non-required fields within objects.
</info added on 2025-07-06T18:57:42.746Z>

## 8. Implement Share Properties Configuration Block [done]
### Dependencies: None
### Description: Add support for configuring file share properties, such as SMB settings and retention policies, using a dynamic block.
### Details:
1. In `variables.tf`, define a new complex object variable `var.share_properties` with a `default = null`. The object structure should mirror the `share_properties` block in the `azurerm_storage_account` resource, including attributes for `smb`, `cors_rule`, and `retention_policy`.
2. In `main.tf`, within the `azurerm_storage_account` resource, add a `dynamic "share_properties"` block.
3. Use the pattern `for_each = var.share_properties != null ? [var.share_properties] : []` to conditionally create the block.
4. Inside the `content` block, map the attributes from the `var.share_properties` object. This will require nested dynamic blocks for list attributes like `cors_rule`.
<info added on 2025-07-06T18:57:58.447Z>
MANDATORY: Before starting this subtask, review CLAUDE.md sections: important-instruction-reminders (lines 5-9) and section 9: Terraform Best Practices Guide (lines 112-122), especially regarding variable design patterns for complex nested objects. Key principles to follow: Do what has been asked; nothing more, nothing less. ALWAYS prefer editing existing files. NEVER create new files. Complex objects with nested structures require careful implementation of dynamic blocks.
</info added on 2025-07-06T18:57:58.447Z>

