# Task ID: 28
# Title: Refactor 'Identity-Access' Example for Correctness
# Status: pending
# Dependencies: 23
# Priority: high
# Description: Correct the 'identity-access' example by removing direct container resources in favor of the module's parameters. Add distinct demonstrations for SystemAssigned, UserAssigned, and combined identity types, including a complete encryption flow using a managed identity with Azure Key Vault.
# Details:
1. Remove all `azurerm_storage_container` resources from the example. 2. Refactor to use the module's `containers` input parameter. 3. Structure the example to clearly demonstrate three identity scenarios: SystemAssigned, UserAssigned, and both. 4. Implement the full customer-managed key encryption flow: create a Key Vault and key, grant the storage account's managed identity access to the vault, and configure the module's `customer_managed_key` block to use the key, e.g., `customer_managed_key = { key_vault_key_id = azurerm_key_vault_key.example.id, user_assigned_identity_id = azurerm_user_assigned_identity.example.id }`.

# Test Strategy:
Apply each identity variation separately. For each, verify in the Azure Portal that the storage account has the correct identity type(s) enabled. Check the 'Encryption' settings to confirm it is using the specified customer-managed key from the Key Vault.

# Subtasks:
## 1. Refactor Container Management to Use Module Input [pending]
### Dependencies: None
### Description: Modify the 'identity-access' example to remove all direct `azurerm_storage_container` resource declarations. The example should instead leverage the module's `containers` input parameter to declare and manage storage containers.
### Details:
In the `examples/identity-access/main.tf` file, delete all `resource "azurerm_storage_container" "..."` blocks. In the primary `module "storage_account"` call, add the `containers` argument to define the necessary containers. For example: `containers = { "logs" = {}, "data" = { public_access = "None" } }`. This ensures container configuration is handled by the module itself.

## 2. Implement Key Vault and Key for Encryption [pending]
### Dependencies: None
### Description: Add the necessary Terraform resources to the example to provision an Azure Key Vault and a cryptographic key. This infrastructure is a prerequisite for demonstrating customer-managed key (CMK) encryption with managed identities.
### Details:
In `examples/identity-access/main.tf`, add a `resource "azurerm_key_vault" "example"` and a `resource "azurerm_key_vault_key" "example"`. Configure the Key Vault with `sku_name = "premium"`, `soft_delete_retention_days = 7`, and `purge_protection_enabled = true`. The key should be of type 'RSA'. This creates the components needed for the encryption flow.

## 3. Structure Identity Scenarios and Grant Key Vault Access [pending]
### Dependencies: None
### Description: Restructure the example to clearly demonstrate three distinct identity scenarios: System-Assigned, User-Assigned, and both combined. For each scenario, create a separate module call and grant the relevant managed identity the necessary permissions ('Get', 'Wrap Key', 'Unwrap Key') on the Key Vault key.
### Details:
Create three separate module calls: `module "storage_system_assigned"`, `module "storage_user_assigned"`, and `module "storage_combined"`. 
1. **SystemAssigned**: Set `identity_type = "SystemAssigned"`. Create an `azurerm_key_vault_access_policy` referencing this module's `storage_account_system_assigned_identity[0].principal_id`.
2. **UserAssigned**: Create an `azurerm_user_assigned_identity`. Set `identity_type = "UserAssigned"` and pass the identity's ID to `user_assigned_identity_resource_ids`. Create an access policy for this identity's `principal_id`.
3. **Combined**: Set `identity_type = "SystemAssigned, UserAssigned"`. Create an access policy for its system-assigned identity's principal ID.

## 4. Configure CMK Encryption and Demonstrate Container RBAC [pending]
### Dependencies: None
### Description: For each of the three identity scenarios, configure the `customer_managed_key` block to enable encryption using the Key Vault key. Also, add a demonstration of container-level RBAC by assigning a role to one of the managed identities for a specific container.
### Details:
For each of the three module calls:
1. Add the `customer_managed_key` block. For System-Assigned, it only needs the `key_vault_key_id`. For User-Assigned and Combined, it also requires the `user_assigned_identity_id`.
   - Example for User-Assigned: `customer_managed_key = { key_vault_key_id = azurerm_key_vault_key.example.id, user_assigned_identity_id = azurerm_user_assigned_identity.example.id }`
2. Add an `azurerm_role_assignment` resource. Assign the 'Storage Blob Data Contributor' role to a managed identity (e.g., the user-assigned identity). The scope should be a specific container, which can be retrieved from the module's output, e.g., `module.storage_user_assigned.containers["data"].id`.

