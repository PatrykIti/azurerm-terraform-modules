# Task ID: 29
# Title: Fix and Enhance Multi-Region Example
# Status: pending
# Dependencies: 23
# Priority: medium
# Description: Fix and enhance the 'multi-region' example by correcting the Terraform version requirement, implementing a practical replication mechanism using a Logic App, and adding monitoring and security enhancements.
# Details:
1. Update the `required_version` in the `terraform` block to `~> 4.36.0`. 2. Add an `azurerm_logic_app_workflow` resource that triggers on a schedule to copy new blobs from the primary to the secondary storage account. 3. Add an `azurerm_monitor_metric_alert` to monitor replication status (e.g., alert if `UsedCapacity` on the secondary account does not increase over a time period). 4. Secure both storage accounts with private endpoints and restrictive Network Security Groups (NSGs). 5. Add a `README.md` file with cost estimation notes.

# Test Strategy:
Apply the configuration. Manually trigger the Logic App and verify that a test blob is copied to the secondary storage account. In Azure Monitor, confirm the alert rule is active. Verify network isolation by checking the private endpoint connections and NSG rules in the Azure Portal.

# Subtasks:
## 1. Update Terraform Version and Secure Storage Accounts [pending]
### Dependencies: None
### Description: Update the Terraform provider version and implement foundational security for both storage accounts. This involves configuring private endpoints and network rules to restrict public access, ensuring a secure base for the replication logic.
### Details:
1. In the main Terraform configuration file (`main.tf`), locate the `terraform` block and update the `required_version` constraint to `~> 4.36.0`.
2. Define two `azurerm_private_endpoint` resources, one for the primary storage account and one for the secondary.
3. Associate these private endpoints with the appropriate virtual network and subnet.
4. Modify the `azurerm_storage_account` resources by setting `public_network_access_enabled` to `false` and configuring the `network_rules` block to default to 'Deny'.

## 2. Implement Scheduled Blob Replication with a Logic App [pending]
### Dependencies: None
### Description: Create an Azure Logic App workflow that periodically copies new or updated blobs from the primary storage account to the secondary one. This will serve as the practical replication mechanism for the multi-region example.
### Details:
1. Add an `azurerm_logic_app_workflow` resource to your Terraform configuration.
2. Configure the workflow with a 'Recurrence' trigger to run on a defined schedule (e.g., every 15 minutes).
3. Define the workflow steps in the `workflow_schema` or a linked JSON file: 
   a. Use the 'List blobs' action to get files from the primary container.
   b. Use a 'For each' loop to iterate over the listed blobs.
   c. Inside the loop, use 'Get blob content' from the primary and 'Create blob' to write it to the secondary.
4. Grant the Logic App's managed identity the 'Storage Blob Data Contributor' role on both storage accounts to allow it to read and write blobs.

## 3. Configure Replication Monitoring and Add Documentation [pending]
### Dependencies: None
### Description: Set up a monitoring alert to detect potential replication failures and create a README file to document the example's architecture, usage, and estimated costs.
### Details:
1. Define an `azurerm_monitor_metric_alert` resource in Terraform.
2. Target the secondary storage account's `UsedCapacity` metric.
3. Configure the alert criteria to trigger if the metric's value does not increase over a specific time window (e.g., 1 hour), indicating that replication may have stalled. Set up an action group to send an email notification.
4. Create a `README.md` file in the root of the example directory.
5. Document the purpose of the example, the resources it creates, and provide a high-level cost estimation note covering storage, Logic App executions, and data transfer fees.

