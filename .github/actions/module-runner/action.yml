name: 'Module Runner'
description: 'Runs module-specific actions dynamically'

inputs:
  module:
    description: 'Module name'
    required: true
  action:
    description: 'Action to run (validate, test, security)'
    required: true
  terraform-version:
    description: 'Terraform version'
    required: false
    default: '1.10.3'
  github-token:
    description: 'GitHub token for security scan'
    required: false
  azure-credentials:
    description: 'Azure credentials for testing'
    required: false

runs:
  using: 'composite'
  steps:
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ inputs.terraform-version }}
        terraform_wrapper: false
    
    - name: Check if module action exists
      id: check
      shell: bash
      run: |
        ACTION_PATH="modules/${{ inputs.module }}/.github/actions/${{ inputs.action }}/action.yml"
        if [[ -f "$ACTION_PATH" ]]; then
          echo "exists=true" >> $GITHUB_OUTPUT
          echo "Action found: $ACTION_PATH"
        else
          echo "exists=false" >> $GITHUB_OUTPUT
          echo "Action not found: $ACTION_PATH"
        fi

    - name: Run module-specific action
      if: steps.check.outputs.exists == 'true'
      shell: bash
      run: |
        echo "Running ${{ inputs.action }} action for ${{ inputs.module }}"
        
        # Read the action.yml and execute the steps
        ACTION_PATH="modules/${{ inputs.module }}/.github/actions/${{ inputs.action }}/action.yml"
        
        # This is a workaround - we'll execute the steps from the action manually
        case "${{ inputs.action }}" in
          validate)
            cd modules/${{ inputs.module }}
            terraform init -backend=false
            terraform validate
            terraform fmt -check -recursive
            
            # Validate examples
            for example in examples/*/; do
              if [[ -d "$example" && -f "$example/main.tf" ]]; then
                echo "Validating example: $example"
                cd "$example"
                terraform init -backend=false
                terraform validate
                cd - > /dev/null
              fi
            done
            ;;
            
          test)
            echo "Running tests for ${{ inputs.module }}"
            ;;
            
          security)
            # Run Checkov directly
            echo "Running security scan for ${{ inputs.module }}"
            ;;
        esac

    - name: Setup Go for tests
      if: inputs.action == 'test'
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
    
    - name: Run Terratest
      if: inputs.action == 'test' 
      shell: bash
      working-directory: ./modules/${{ inputs.module }}
      env:
        ARM_USE_OIDC: true
        ARM_CLIENT_ID: ${{ fromJSON(inputs.azure-credentials).clientId }}
        ARM_TENANT_ID: ${{ fromJSON(inputs.azure-credentials).tenantId }}
        ARM_SUBSCRIPTION_ID: ${{ fromJSON(inputs.azure-credentials).subscriptionId }}
        AZURE_CLIENT_ID: ${{ fromJSON(inputs.azure-credentials).clientId }}
        AZURE_TENANT_ID: ${{ fromJSON(inputs.azure-credentials).tenantId }}
        AZURE_SUBSCRIPTION_ID: ${{ fromJSON(inputs.azure-credentials).subscriptionId }}
        AZURE_CLIENT_SECRET: ${{ fromJSON(inputs.azure-credentials).clientSecret }}
        AZURE_FEDERATED_TOKEN_FILE: /tmp/azure-oidc-token
        AZURE_AUTHORITY_HOST: https://login.microsoftonline.com/
      run: |
        if [[ -d "tests" ]]; then
          echo "Running Terratest for ${{ inputs.module }}"
          cd tests
          
          # Initialize go modules if go.sum doesn't exist
          if [[ ! -f "go.sum" ]]; then
            echo "go.sum not found, running go mod tidy..."
            go mod tidy
          fi
          
          go mod download
          go test -v -timeout 60m
        else
          echo "No tests directory found, validating examples instead"
          if [[ -d "examples" ]]; then
            for example in examples/*/; do
              if [[ -d "$example" && -f "$example/main.tf" ]]; then
                echo "Testing example: $example"
                cd "$example"
                terraform init -backend=false
                terraform plan
                cd - > /dev/null
              fi
            done
          fi
        fi
    
    - name: Run Checkov security scan
      if: inputs.action == 'security'
      uses: bridgecrewio/checkov-action@v12
      with:
        directory: modules/${{ inputs.module }}
        framework: terraform
        soft_fail: true
        output_format: json