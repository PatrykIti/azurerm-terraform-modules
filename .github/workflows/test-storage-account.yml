name: Test Storage Account Module

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'modules/azurerm_storage_account/**'
      - '.github/workflows/test-storage-account.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'modules/azurerm_storage_account/**'
      - '.github/workflows/test-storage-account.yml'

env:
  GO_VERSION: '1.21'
  TERRAFORM_VERSION: '1.5.0'
  MODULE_PATH: 'modules/azurerm_storage_account'

jobs:
  validate:
    name: Validate Terraform
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Format Check
        run: |
          cd ${{ env.MODULE_PATH }}
          terraform fmt -check -recursive

      - name: Terraform Init
        run: |
          cd ${{ env.MODULE_PATH }}
          terraform init -backend=false

      - name: Terraform Validate
        run: |
          cd ${{ env.MODULE_PATH }}
          terraform validate

      - name: Validate Test Fixtures
        run: |
          cd ${{ env.MODULE_PATH }}/tests
          make validate-fixtures

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: validate
    strategy:
      matrix:
        test-suite:
          - name: "Basic"
            target: "test-basic"
            timeout: "15m"
          - name: "Validation"
            target: "test-validation"
            timeout: "10m"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Go Dependencies
        run: |
          cd ${{ env.MODULE_PATH }}/tests
          go mod download

      - name: Run ${{ matrix.test-suite.name }} Tests
        env:
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        run: |
          cd ${{ env.MODULE_PATH }}/tests
          make ${{ matrix.test-suite.target }} TIMEOUT=${{ matrix.test-suite.timeout }}

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository
    strategy:
      matrix:
        test-suite:
          - name: "Security"
            target: "test-security"
            timeout: "20m"
          - name: "Network"
            target: "test-network"
            timeout: "20m"
          - name: "Private Endpoint"
            target: "test-private-endpoint"
            timeout: "20m"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Run ${{ matrix.test-suite.name }} Tests
        env:
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        run: |
          cd ${{ env.MODULE_PATH }}/tests
          make ${{ matrix.test-suite.target }} TIMEOUT=${{ matrix.test-suite.timeout }}

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Run Tests with Coverage
        env:
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        run: |
          cd ${{ env.MODULE_PATH }}/tests
          make test-coverage

      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./${{ env.MODULE_PATH }}/tests/coverage.out
          flags: storage-account
          name: storage-account-coverage

      - name: Archive Coverage Report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: ${{ env.MODULE_PATH }}/tests/coverage.html

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Run Benchmarks
        env:
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        run: |
          cd ${{ env.MODULE_PATH }}/tests
          make benchmark | tee benchmark-results.txt

      - name: Archive Benchmark Results
        uses: actions/upload-artifact@v3
        with:
          name: benchmark-results
          path: ${{ env.MODULE_PATH }}/tests/benchmark-results.txt

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run Security Scan
        run: |
          cd ${{ env.MODULE_PATH }}/tests
          make security

      - name: Upload Security Report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-report
          path: ${{ env.MODULE_PATH }}/tests/security-report.json