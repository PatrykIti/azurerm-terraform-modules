name: PR Validation (Improved)

on:
  pull_request:
    types: [opened, synchronize, reopened, edited]

permissions:
  contents: read
  pull-requests: write
  statuses: write
  security-events: write

jobs:
  # Detect which modules are affected by this PR
  detect-changes:
    name: Detect Affected Modules
    runs-on: ubuntu-latest
    outputs:
      modules: ${{ steps.set-matrix.outputs.modules }}
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      has_modules: ${{ steps.set-matrix.outputs.has_modules }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT || github.token }}
      
      # Extract module from PR title if it's a PR
      - name: Extract module from PR title
        id: pr-module
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          echo "PR Title: $PR_TITLE"
          
          # Extract module name from PR title patterns
          if [[ "$PR_TITLE" =~ ^[^(]+\(([^)]+)\) ]]; then
            SCOPE="${BASH_REMATCH[1]}"
            echo "Detected scope: $SCOPE"
            
            # Split scope by comma and process each module
            IFS=',' read -ra SCOPE_ARRAY <<< "$SCOPE"
            VALID_MODULES=()
            
            for scope_item in "${SCOPE_ARRAY[@]}"; do
              # Trim whitespace
              scope_item=$(echo "$scope_item" | xargs)
              echo "Processing scope item: $scope_item"
              
              # Skip non-module scopes
              if [[ "$scope_item" =~ ^(core|deps|deps-dev|ci|docs|tests|workflows|templates|semantic-release|security|terraform-docs|examples|modules|scripts)$ ]]; then
                echo "Skipping non-module scope: $scope_item"
                continue
              fi
              
              # Check if scope matches a module name
              MODULE_NAME="$scope_item"
              
              # If the scope already contains azurerm_, use it as is
              if [[ "$MODULE_NAME" =~ ^azurerm_ ]]; then
                echo "Module name already has azurerm_ prefix: $MODULE_NAME"
              else
                # Remove azurerm- prefix if present
                MODULE_NAME="${MODULE_NAME#azurerm-}"
                # Replace dashes with underscores
                MODULE_NAME="${MODULE_NAME//-/_}"
                # Add azurerm_ prefix
                MODULE_NAME="azurerm_${MODULE_NAME}"
              fi
              
              # Check if this module exists
              if [[ -d "modules/$MODULE_NAME" ]]; then
                echo "Found module: $MODULE_NAME"
                VALID_MODULES+=("$MODULE_NAME")
              else
                echo "Module $MODULE_NAME not found in modules/ directory"
              fi
            done
            
            # Convert array to JSON format
            if [ ${#VALID_MODULES[@]} -eq 0 ]; then
              MODULES="[]"
            else
              MODULES=$(printf '%s\n' "${VALID_MODULES[@]}" | jq -R -s -c 'split("\n")[:-1]')
            fi
            
            echo "Valid modules found: ${VALID_MODULES[*]}"
            echo "modules=$MODULES" >> $GITHUB_OUTPUT
          else
            echo "No module detected in PR title, will use path-based detection"
            echo "modules=[]" >> $GITHUB_OUTPUT
          fi
      
      # Dynamically generate filters based on existing modules
      - name: Generate path filters
        id: generate-filters
        run: |
          FILTERS=""
          for module_dir in modules/*/; do
            if [ -d "$module_dir" ]; then
              module_name=$(basename "$module_dir")
              FILTERS="${FILTERS}${module_name}:\n  - 'modules/${module_name}/**'\n  - 'shared/**'\n"
            fi
          done
          echo -e "$FILTERS" > .github/filters.yml
          echo "Generated filters:"
          cat .github/filters.yml
      
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: .github/filters.yml
      
      - id: set-matrix
        run: |
          # For PRs - merge modules from title and path detection
          echo "=== Module Detection for PR ==="
          
          # Get modules from PR title
          PR_MODULES='${{ steps.pr-module.outputs.modules }}'
          echo "Modules from PR title: $PR_MODULES"
          
          # Get modules from path changes
          PATH_MODULES='${{ steps.filter.outputs.changes }}'
          echo "Modules from path changes: $PATH_MODULES"
          
          # Merge both lists
          if [[ "$PR_MODULES" != "[]" && "$PATH_MODULES" != "[]" ]]; then
            # Both have modules - merge them
            ALL_MODULES=$(echo "$PR_MODULES $PATH_MODULES" | jq -s -c 'add | unique')
            echo "Merged modules (unique): $ALL_MODULES"
            MODULES="$ALL_MODULES"
          elif [[ "$PR_MODULES" != "[]" ]]; then
            # Only PR title has modules
            MODULES="$PR_MODULES"
            echo "Using modules from PR title only"
          elif [[ "$PATH_MODULES" != "[]" ]]; then
            # Only path changes have modules
            MODULES="$PATH_MODULES"
            echo "Using modules from path changes only"
          else
            # No modules detected - check all
            echo "No specific modules detected - will validate all"
            # Get all modules
            ALL_MODULES=()
            for module_dir in modules/*/; do
              if [ -d "$module_dir" ]; then
                module_name=$(basename "$module_dir")
                ALL_MODULES+=("$module_name")
              fi
            done
            if [ ${#ALL_MODULES[@]} -eq 0 ]; then
              MODULES="[]"
            else
              MODULES=$(printf '%s\n' "${ALL_MODULES[@]}" | jq -R -s -c 'split("\n")[:-1]')
            fi
          fi
          
          echo "=== Final modules to validate: $MODULES ==="
          
          if [ "$MODULES" == "[]" ]; then
            echo "modules=[]" >> $GITHUB_OUTPUT
            echo "matrix={\"module\":[]}" >> $GITHUB_OUTPUT
            echo "has_modules=false" >> $GITHUB_OUTPUT
          else
            echo "modules=$MODULES" >> $GITHUB_OUTPUT
            echo "matrix={\"module\":${MODULES}}" >> $GITHUB_OUTPUT
            echo "has_modules=true" >> $GITHUB_OUTPUT
          fi

  # PR title validation (not per module)
  validate-pr-title:
    name: Validate PR Title
    runs-on: ubuntu-latest
    
    steps:
      - name: Check PR title follows conventional commits
        # Skip validation for Dependabot PRs
        if: ${{ !startsWith(github.head_ref, 'dependabot/') }}
        uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        with:
          types: |
            feat
            fix
            docs
            style
            refactor
            perf
            test
            build
            ci
            chore
            revert
          scopes: |
            storage-account
            virtual-network
            key-vault
            app-service
            sql-database
            core
            deps
            deps-dev
            ci
            docs
            tests
            workflows
            templates
            semantic-release
            security
            terraform-docs
            examples
            modules
            scripts
          requireScope: false
          subjectPattern: ^(?![A-Z]).+$
          subjectPatternError: |
            The subject "{subject}" found in the pull request title "{title}"
            didn't match the configured pattern. Please ensure that the subject
            doesn't start with an uppercase character.
          validateSingleCommit: false

  # Per-module terraform formatting check
  terraform-fmt:
    name: Format Check - ${{ matrix.module }}
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.has_modules == 'true' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT || github.token }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest
      
      - name: Check formatting for ${{ matrix.module }}
        id: fmt
        run: |
          module_dir="modules/${{ matrix.module }}"
          
          # Find all subdirectories with .tf files in the module
          tf_dirs=$(find "$module_dir" -name "*.tf" -exec dirname {} \; | sort -u | grep -v ".terraform")
          
          fmt_issues=()
          for dir in $tf_dirs; do
            echo "Checking format in: $dir"
            if ! terraform fmt -check -recursive "$dir"; then
              fmt_issues+=("$dir")
            fi
          done
          
          if [ ${#fmt_issues[@]} -gt 0 ]; then
            echo "❌ Terraform formatting issues found in:"
            printf '%s\n' "${fmt_issues[@]}"
            echo ""
            echo "Please run 'terraform fmt -recursive' to fix formatting issues."
            echo "fmt_needed=true" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "✅ Module ${{ matrix.module }} is properly formatted"
            echo "fmt_needed=false" >> $GITHUB_OUTPUT
          fi

  # Per-module terraform validation
  terraform-validate:
    name: Validate - ${{ matrix.module }}
    needs: [detect-changes, terraform-fmt]
    if: ${{ needs.detect-changes.outputs.has_modules == 'true' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT || github.token }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest
      
      - name: Validate ${{ matrix.module }}
        run: |
          module_dir="modules/${{ matrix.module }}"
          
          # Validate main module
          echo "## Validating module: $module_dir"
          cd "$module_dir"
          
          if terraform init -backend=false; then
            if ! terraform validate; then
              echo "❌ Validation failed for module: ${{ matrix.module }}"
              exit 1
            else
              echo "✅ Module validated successfully: ${{ matrix.module }}"
            fi
          else
            echo "❌ Failed to initialize module: ${{ matrix.module }}"
            exit 1
          fi
          
          cd - > /dev/null
          
          # Also validate examples for this module
          if [[ -d "$module_dir/examples" ]]; then
            example_dirs=$(find "$module_dir/examples" -mindepth 1 -maxdepth 1 -type d)
            for example in $example_dirs; do
              echo "## Validating example: $example"
              cd "$example"
              
              if terraform init -backend=false; then
                if ! terraform validate; then
                  echo "❌ Validation failed for example: $(basename $example)"
                  exit 1
                else
                  echo "✅ Example validated successfully: $(basename $example)"
                fi
              else
                echo "❌ Failed to initialize example: $(basename $example)"
                exit 1
              fi
              
              cd - > /dev/null
            done
          fi

  # Per-module TFLint analysis
  tflint:
    name: TFLint - ${{ matrix.module }}
    needs: [detect-changes, terraform-fmt]
    if: ${{ needs.detect-changes.outputs.has_modules == 'true' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT || github.token }}
      
      - name: Cache tflint plugins
        uses: actions/cache@v4
        with:
          path: ~/.tflint.d/plugins
          key: ${{ runner.os }}-tflint-${{ hashFiles('.tflint.hcl') }}
          restore-keys: |
            ${{ runner.os }}-tflint-
      
      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: latest
      
      - name: Initialize TFLint
        run: |
          tflint --init
          echo "TFLint version:"
          tflint --version
      
      - name: Run TFLint on ${{ matrix.module }}
        id: tflint
        run: |
          module_dir="modules/${{ matrix.module }}"
          
          # Find all subdirectories with .tf files in the module
          tf_dirs=$(find "$module_dir" -name "*.tf" -exec dirname {} \; | sort -u | grep -v ".terraform")
          
          tflint_failed=false
          for dir in $tf_dirs; do
            echo "## Running TFLint on: $dir"
            
            if output=$(tflint --chdir="$dir" --format=default --force 2>&1); then
              echo "✅ TFLint passed for: $dir"
              echo "$output"
            else
              echo "❌ TFLint found issues in: $dir"
              echo "$output"
              tflint_failed=true
            fi
            echo ""
          done
          
          if [ "$tflint_failed" = true ]; then
            exit 1
          fi

  # Per-module documentation check
  documentation-check:
    name: Docs Check - ${{ matrix.module }}
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.has_modules == 'true' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT || github.token }}
      
      - name: Install terraform-docs
        run: |
          TERRAFORM_DOCS_VERSION="v0.20.0"
          curl -sSLo ./terraform-docs.tar.gz https://github.com/terraform-docs/terraform-docs/releases/download/${TERRAFORM_DOCS_VERSION}/terraform-docs-${TERRAFORM_DOCS_VERSION}-linux-amd64.tar.gz
          tar -xzf terraform-docs.tar.gz
          chmod +x terraform-docs
          sudo mv terraform-docs /usr/local/bin/
          terraform-docs --version
      
      - name: Check documentation for ${{ matrix.module }}
        id: docs
        run: |
          module_dir="modules/${{ matrix.module }}"
          docs_outdated=false
          
          # Update examples list if module has examples
          if [[ -d "$module_dir/examples" ]] && [[ -x "./scripts/update-examples-list.sh" ]]; then
            echo "Updating examples list for ${{ matrix.module }}..."
            ./scripts/update-examples-list.sh "$module_dir"
          fi
          
          if [[ -f "$module_dir/README.md" ]]; then
            # Check if terraform-docs content is up to date
            if [[ -x "./scripts/check-terraform-docs.sh" ]]; then
              if ! ./scripts/check-terraform-docs.sh "$module_dir"; then
                echo "❌ Documentation is outdated for module: ${{ matrix.module }}"
                docs_outdated=true
              else
                echo "✅ Documentation is up to date for module: ${{ matrix.module }}"
              fi
            else
              # Fallback to old method
              if terraform-docs markdown table --output-file README.md.tmp "$module_dir" 2>/dev/null; then
                if ! diff -q "$module_dir/README.md" "$module_dir/README.md.tmp" > /dev/null 2>&1; then
                  echo "❌ Documentation is outdated for module: ${{ matrix.module }}"
                  docs_outdated=true
                fi
                rm -f "$module_dir/README.md.tmp"
              fi
            fi
          else
            echo "❌ Missing README.md for module: ${{ matrix.module }}"
            docs_outdated=true
          fi
          
          # Check examples documentation
          if [[ -d "$module_dir/examples" ]]; then
            for example in $(find "$module_dir/examples" -mindepth 1 -maxdepth 1 -type d); do
              if [[ -f "$example/README.md" ]]; then
                if grep -q "BEGIN_TF_DOCS" "$example/README.md" && grep -q "END_TF_DOCS" "$example/README.md"; then
                  cd "$example"
                  if terraform-docs markdown table . > /dev/null 2>&1; then
                    echo "  ✓ Example $(basename "$example") documentation OK"
                  else
                    echo "  ❌ Example $(basename "$example") documentation update failed"
                    docs_outdated=true
                  fi
                  cd - > /dev/null
                fi
              else
                echo "  ❌ Example $(basename "$example") missing README.md"
                docs_outdated=true
              fi
            done
          fi
          
          if [ "$docs_outdated" = true ]; then
            exit 1
          fi

  # Per-module security scan
  security-scan:
    name: Security - ${{ matrix.module }}
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.has_modules == 'true' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT || github.token }}
      
      - name: Run Checkov on ${{ matrix.module }}
        id: checkov
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: modules/${{ matrix.module }}
          framework: terraform
          soft_fail: true
          output_format: cli
          download_external_modules: true
        env:
          GITHUB_TOKEN: ${{ secrets.PAT || github.token }}
      
      - name: Run tfsec on ${{ matrix.module }}
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          working_directory: modules/${{ matrix.module }}
          soft_fail: true
          github_token: ${{ secrets.PAT || github.token }}
        env:
          GITHUB_TOKEN: ${{ secrets.PAT || github.token }}

  # Summary job that collects all results
  quality-gates:
    name: Quality Gates Summary
    runs-on: ubuntu-latest
    needs: [detect-changes, validate-pr-title, terraform-fmt, terraform-validate, tflint, documentation-check, security-scan]
    if: always()
    
    steps:
      - name: Quality gates summary
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PAT }}
          script: |
            const jobs = ${{ toJSON(needs) }};
            const modules = jobs['detect-changes'].outputs.modules ? JSON.parse(jobs['detect-changes'].outputs.modules) : [];
            
            let summary = '## 🔍 PR Validation Summary\n\n';
            
            // Overall status
            summary += '### Overall Status\n\n';
            summary += '| Check | Status |\n';
            summary += '|-------|--------|\n';
            
            // PR title validation (not module-specific)
            const prTitleStatus = jobs['validate-pr-title'].result === 'success' ? '✅ Passed' : 
                                  jobs['validate-pr-title'].result === 'skipped' ? '⏭️ Skipped' : '❌ Failed';
            summary += `| PR Title Validation | ${prTitleStatus} |\n`;
            
            summary += '\n';
            
            // Per-module results if modules were detected
            if (modules.length > 0) {
              summary += '### Module-Specific Results\n\n';
              
              for (const module of modules) {
                summary += `#### 📦 ${module}\n\n`;
                summary += '| Check | Status |\n';
                summary += '|-------|--------|\n';
                
                // Check each job type for this module
                const checkTypes = ['terraform-fmt', 'terraform-validate', 'tflint', 'documentation-check', 'security-scan'];
                const checkNames = {
                  'terraform-fmt': 'Terraform Format',
                  'terraform-validate': 'Terraform Validate',
                  'tflint': 'TFLint',
                  'documentation-check': 'Documentation',
                  'security-scan': 'Security Scan'
                };
                
                for (const checkType of checkTypes) {
                  // Jobs are matrix jobs, so we need to check the overall job status
                  const jobResult = jobs[checkType]?.result;
                  const status = jobResult === 'success' ? '✅ Passed' : 
                               jobResult === 'skipped' ? '⏭️ Skipped' : 
                               jobResult === 'failure' ? '❌ Failed' : '⏱️ Running';
                  summary += `| ${checkNames[checkType]} | ${status} |\n`;
                }
                
                summary += '\n';
              }
            }
            
            // Overall conclusion
            const allPassed = Object.entries(jobs).every(([name, job]) => 
              name === 'detect-changes' || job.result === 'success' || job.result === 'skipped'
            );
            
            if (allPassed) {
              summary += '### ✅ All quality gates passed!\n\n';
              summary += 'This PR is ready for review.';
            } else {
              summary += '### ❌ Some quality gates failed\n\n';
              summary += 'Please address the failing checks before this PR can be merged.';
            }
            
            // Add helpful commands
            summary += '\n\n### 🛠️ Quick Fix Commands\n\n';
            summary += '```bash\n';
            summary += '# Fix formatting issues\n';
            summary += 'terraform fmt -recursive\n\n';
            summary += '# Update documentation\n';
            summary += 'cd <module-directory> && terraform-docs .\n\n';
            summary += '# Run TFLint\n';
            summary += 'tflint --init && tflint --chdir=<module-directory>\n';
            summary += '```';
            
            // Find and update existing comment or create new one
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('PR Validation Summary')
            );
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: summary
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: summary
              });
            }