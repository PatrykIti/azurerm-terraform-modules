name: Module Release

on:
  workflow_dispatch:
    inputs:
      module:
        description: 'Module to release'
        required: true
        type: choice
        options:
          - azurerm_storage_account
      dry_run:
        description: 'Perform a dry run without creating release'
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  semantic-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      
      - name: Install dependencies
        run: npm ci
      
      - name: Setup Terraform
        uses: ./.github/actions/terraform-setup
        with:
          terraform-version: '1.10.3'
          install-terraform-docs: true
      
      - name: Validate module before release
        uses: ./.github/actions/module-runner
        with:
          module: ${{ inputs.module }}
          action: validate
          terraform-version: '1.10.3'
      
      - name: Get module configuration
        id: module-config
        run: |
          MODULE_DIR="modules/${{ inputs.module }}"
          
          # Extract module prefix from .releaserc.json
          if [[ -f "$MODULE_DIR/.releaserc.json" ]]; then
            PREFIX=$(jq -r '.tagFormat' "$MODULE_DIR/.releaserc.json" | sed 's/\${version}//')
            echo "prefix=$PREFIX" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Missing .releaserc.json in $MODULE_DIR"
            exit 1
          fi
          
          # Extract module scope for commit filtering
          case "${{ inputs.module }}" in
            azurerm_storage_account) SCOPE="storage-account" ;;
            azurerm_virtual_network) SCOPE="virtual-network" ;;
            azurerm_key_vault) SCOPE="key-vault" ;;
            azurerm_application_gateway) SCOPE="app-gateway" ;;
            *) SCOPE="${{ inputs.module }}" ;;
          esac
          echo "scope=$SCOPE" >> $GITHUB_OUTPUT
      
      - name: Run semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GIT_AUTHOR_NAME: github-actions[bot]
          GIT_AUTHOR_EMAIL: github-actions[bot]@users.noreply.github.com
          GIT_COMMITTER_NAME: github-actions[bot]
          GIT_COMMITTER_EMAIL: github-actions[bot]@users.noreply.github.com
        run: |
          cd modules/${{ inputs.module }}
          
          # Run semantic-release with module-specific config
          if [[ "${{ inputs.dry_run }}" == "true" ]]; then
            echo "üîç Running semantic-release in dry-run mode..."
            npx semantic-release --dry-run
          else
            echo "üöÄ Running semantic-release for ${{ inputs.module }}..."
            npx semantic-release
          fi
      
      - name: Update module documentation
        if: ${{ inputs.dry_run != 'true' }}
        run: |
          cd modules/${{ inputs.module }}
          
          # Check if any release was made
          if git diff --name-only HEAD~1 | grep -q "CHANGELOG.md"; then
            echo "üìù Updating module documentation..."
            terraform-docs markdown table --output-file README.md .
            
            # Commit documentation updates if changed
            if git diff --exit-code README.md; then
              echo "No documentation changes needed."
            else
              git add README.md
              git commit -m "docs(${{ steps.module-config.outputs.scope }}): update terraform-docs [skip ci]"
              git push origin HEAD
            fi
          else
            echo "No release was made, skipping documentation update."
          fi