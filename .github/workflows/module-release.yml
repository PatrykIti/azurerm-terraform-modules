name: Module Release

on:
  workflow_dispatch:
    inputs:
      module:
        description: 'Module directory name to release (e.g., azurerm_storage_account)'
        required: true
        type: string
      dry_run:
        description: 'Perform a dry run without creating release'
        required: false
        type: boolean
        default: false
  workflow_call:
    inputs:
      module:
        description: 'Module directory name to release'
        required: true
        type: string
      dry_run:
        description: 'Perform a dry run without creating release'
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  semantic-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true
          token: ${{ secrets.PAT || github.token }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Generate package-lock.json
        run: npm install --package-lock-only --ignore-scripts
      
      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      
      - name: Install dependencies
        run: npm install
      
      - name: Setup Terraform
        uses: ./.github/actions/terraform-setup
        with:
          terraform-version: '1.10.3'
          install-terraform-docs: true
      
      - name: Validate module before release
        uses: ./.github/actions/module-runner
        with:
          module: ${{ inputs.module }}
          action: validate
          terraform-version: '1.10.3'
      
      - name: Validate module exists
        run: |
          MODULE_DIR="modules/${{ inputs.module }}"
          if [[ ! -d "$MODULE_DIR" ]]; then
            echo "‚ùå Module directory '$MODULE_DIR' not found."
            echo "Available modules:"
            ls -1 modules/ | grep -v README
            exit 1
          fi
          
          if [[ ! -f "$MODULE_DIR/.releaserc.js" ]] && [[ ! -f "$MODULE_DIR/.releaserc.json" ]]; then
            echo "‚ùå No .releaserc.js or .releaserc.json found in $MODULE_DIR"
            exit 1
          fi
      
      - name: Get module configuration
        id: module-config
        run: |
          MODULE_DIR="modules/${{ inputs.module }}"
          
          # Use Node.js script to safely extract configuration
          CONFIG_JSON=$(node scripts/get-module-config.js "$MODULE_DIR")
          
          # Extract values from JSON output
          TAG_PREFIX=$(echo "$CONFIG_JSON" | jq -r .tag_prefix)
          COMMIT_SCOPE=$(echo "$CONFIG_JSON" | jq -r .commit_scope)
          
          echo "prefix=$TAG_PREFIX" >> $GITHUB_OUTPUT
          echo "scope=$COMMIT_SCOPE" >> $GITHUB_OUTPUT
          
          echo "‚úÖ Module configuration:"
          echo "   Tag prefix: $TAG_PREFIX"
          echo "   Commit scope: $COMMIT_SCOPE"
      
      - name: Run semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
          GH_TOKEN: ${{ secrets.PAT }}
          GIT_AUTHOR_NAME: github-actions[bot]
          GIT_AUTHOR_EMAIL: github-actions[bot]@users.noreply.github.com
          GIT_COMMITTER_NAME: github-actions[bot]
          GIT_COMMITTER_EMAIL: github-actions[bot]@users.noreply.github.com
        run: |
          # Run semantic-release from repository root with module-specific config
          MODULE_CONFIG="./modules/${{ inputs.module }}/.releaserc.js"
          
          if [[ "${{ inputs.dry_run }}" == "true" ]]; then
            echo "üîç Running semantic-release in dry-run mode..."
            npx semantic-release --extends "$MODULE_CONFIG" --dry-run
          else
            echo "üöÄ Running semantic-release for ${{ inputs.module }}..."
            npx semantic-release --extends "$MODULE_CONFIG"
          fi
      
      - name: Update module documentation
        if: ${{ inputs.dry_run != 'true' }}
        run: |
          MODULE_DIR="modules/${{ inputs.module }}"
          
          # Check if any release was made in the module directory
          if git diff --name-only HEAD~1 | grep -q "$MODULE_DIR/CHANGELOG.md"; then
            echo "üìù Updating module documentation..."
            terraform-docs markdown table --output-file "$MODULE_DIR/README.md" "$MODULE_DIR"
            
            # Commit documentation updates if changed
            if git diff --exit-code "$MODULE_DIR/README.md"; then
              echo "No documentation changes needed."
            else
              git add "$MODULE_DIR/README.md"
              git commit -m "docs(${{ steps.module-config.outputs.scope }}): update terraform-docs [skip ci]"
              git push origin HEAD
            fi
          else
            echo "No release was made, skipping documentation update."
          fi