name: Release Changed Modules

on:
  pull_request:
    types: [closed]
    branches: [main]
  workflow_dispatch:
    inputs:
      modules:
        description: 'Comma-separated list of modules to release (e.g., azurerm_storage_account,azurerm_virtual_network)'
        required: false
        type: string
      dry_run:
        description: 'Perform a dry run without creating release'
        required: false
        type: boolean
        default: true

jobs:
  detect-changes:
    name: Detect Changed Modules
    runs-on: ubuntu-latest
    # Only run on merged PRs or manual dispatch
    if: (github.event.pull_request.merged == true) || (github.event_name == 'workflow_dispatch')
    outputs:
      modules: ${{ steps.changes.outputs.modules }}
      matrix: ${{ steps.changes.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT || github.token }}
          ref: main
      
      - name: Detect changed modules
        id: changes
        run: |
          if [[ -n "${{ inputs.modules }}" ]]; then
            # Manual workflow dispatch with specific modules
            MODULES=$(echo "${{ inputs.modules }}" | tr ',' '\n' | jq -R -s -c 'split("\n")[:-1]')
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # Extract module name from PR title
            PR_TITLE="${{ github.event.pull_request.title }}"
            echo "PR Title: $PR_TITLE"
            
            # Extract scope from conventional commit format (e.g., "feat(storage-account): ...")
            if [[ "$PR_TITLE" =~ ^[^(]+\(([^)]+)\) ]]; then
              SCOPE="${BASH_REMATCH[1]}"
              echo "Detected scope: $SCOPE"
              
              # Check if scope matches a module name (with or without azurerm_ prefix)
              MODULE_NAME="$SCOPE"
              
              # Remove azurerm- prefix if present
              MODULE_NAME="${MODULE_NAME#azurerm-}"
              # Replace dashes with underscores
              MODULE_NAME="${MODULE_NAME//-/_}"
              # Add azurerm_ prefix
              MODULE_NAME="azurerm_${MODULE_NAME}"
              
              # Check if this module exists
              if [[ -d "modules/$MODULE_NAME" ]]; then
                echo "Found module: $MODULE_NAME"
                MODULES="[\"$MODULE_NAME\"]"
              else
                echo "Module $MODULE_NAME not found in modules/ directory"
                MODULES="[]"
              fi
            else
              echo "PR title doesn't contain a scope in conventional commit format"
              MODULES="[]"
            fi
          else
            # This shouldn't happen but handle it gracefully
            MODULES="[]"
          fi
          
          # Output both array and matrix format
          echo "modules=$MODULES" >> $GITHUB_OUTPUT
          
          if [ "$MODULES" == "[]" ]; then
            echo "matrix={\"module\":[]}" >> $GITHUB_OUTPUT
          else
            echo "matrix={\"module\":${MODULES}}" >> $GITHUB_OUTPUT
          fi
          
          echo "üîç Modules to release: $MODULES"
  
  release:
    name: Release Module
    needs: detect-changes
    if: needs.detect-changes.outputs.modules != '[]'
    strategy:
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
      fail-fast: false
    uses: ./.github/workflows/module-release.yml
    with:
      module: ${{ matrix.module }}
      dry_run: ${{ inputs.dry_run || false }}
    secrets: inherit
    permissions:
      contents: write
      pull-requests: write
      issues: write