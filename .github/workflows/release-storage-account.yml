name: Release Storage Account Module

on:
  push:
    tags:
      - 'storage-account/v*.*.*'

permissions:
  contents: write
  packages: write
  id-token: write

env:
  MODULE_NAME: azurerm_storage_account
  MODULE_PATH: modules/azurerm_storage_account

jobs:
  validate-tag:
    name: Validate Release Tag
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Get version from tag
        id: get_version
        run: |
          # Extract version from tag
          TAG="${{ github.ref_name }}"
          VERSION="${TAG#storage-account/v}"
          
          # Validate semantic version format
          if ! [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?(\+[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?$ ]]; then
            echo "❌ Invalid version format: $VERSION"
            echo "Version must follow semantic versioning (e.g., 1.0.0, 1.0.0-beta.1)"
            exit 1
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "✅ Valid version: $VERSION"

  quality-checks:
    name: Quality Checks
    runs-on: ubuntu-latest
    needs: validate-tag
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest
          
      - name: Terraform Format Check
        run: |
          cd ${{ env.MODULE_PATH }}
          terraform fmt -check -recursive
          
      - name: Terraform Init
        run: |
          cd ${{ env.MODULE_PATH }}
          terraform init -backend=false
          
      - name: Terraform Validate
        run: |
          cd ${{ env.MODULE_PATH }}
          terraform validate
          
      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: latest
          
      - name: Run TFLint
        run: |
          cd ${{ env.MODULE_PATH }}
          tflint --init
          tflint --format=default --force
          
      - name: Run Checkov
        id: checkov
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: ${{ env.MODULE_PATH }}
          framework: terraform
          soft_fail: true
          
      - name: Verify Documentation
        run: |
          # Install terraform-docs
          curl -sSLo ./terraform-docs.tar.gz https://github.com/terraform-docs/terraform-docs/releases/download/v0.17.0/terraform-docs-v0.17.0-linux-amd64.tar.gz
          tar -xzf terraform-docs.tar.gz
          chmod +x terraform-docs
          sudo mv terraform-docs /usr/local/bin/
          
          cd ${{ env.MODULE_PATH }}
          
          # Generate docs and check if up to date
          terraform-docs markdown table . > README.md.tmp
          if ! diff -q README.md README.md.tmp > /dev/null 2>&1; then
            echo "❌ Documentation is not up to date"
            exit 1
          fi
          echo "✅ Documentation is up to date"

  test-examples:
    name: Test Examples
    runs-on: ubuntu-latest
    needs: quality-checks
    strategy:
      matrix:
        example: [simple, complete, secure, secure-private-endpoint, multi-region]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest
          
      - name: Validate ${{ matrix.example }} example
        run: |
          example_path="${{ env.MODULE_PATH }}/examples/${{ matrix.example }}"
          
          if [[ -d "$example_path" ]]; then
            echo "Validating ${{ matrix.example }} example..."
            cd "$example_path"
            
            terraform init -backend=false
            terraform validate
            terraform plan -input=false || true
            
            echo "✅ ${{ matrix.example }} example validated"
          else
            echo "⚠️ ${{ matrix.example }} example not found"
          fi

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-tag, quality-checks, test-examples]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Generate Release Notes
        id: release_notes
        run: |
          VERSION="${{ needs.validate-tag.outputs.version }}"
          
          # Create release notes
          cat > release_notes.md << 'EOF'
          ## Azure Storage Account Module v${{ needs.validate-tag.outputs.version }}
          
          ### 📦 Module Information
          - **Module**: `${{ env.MODULE_NAME }}`
          - **Version**: `${{ needs.validate-tag.outputs.version }}`
          - **Terraform Version**: `>= 1.3.0`
          - **AzureRM Provider**: `4.35.0`
          
          ### 🚀 Features
          - Comprehensive Azure Storage Account management
          - Security-by-default configuration
          - Private endpoint support for all storage services
          - Customer-managed key encryption
          - Advanced threat protection
          - Lifecycle management rules
          - Static website hosting
          - Queue properties management
          
          ### 📋 Requirements
          - Terraform >= 1.3.0
          - AzureRM Provider 4.35.0
          
          ### 📚 Documentation
          See the [module README](https://github.com/${{ github.repository }}/tree/${{ github.ref_name }}/${{ env.MODULE_PATH }}/README.md) for detailed usage instructions.
          
          ### 🏷️ Examples
          - [Simple](https://github.com/${{ github.repository }}/tree/${{ github.ref_name }}/${{ env.MODULE_PATH }}/examples/simple)
          - [Complete](https://github.com/${{ github.repository }}/tree/${{ github.ref_name }}/${{ env.MODULE_PATH }}/examples/complete)
          - [Secure](https://github.com/${{ github.repository }}/tree/${{ github.ref_name }}/${{ env.MODULE_PATH }}/examples/secure)
          - [Secure with Private Endpoints](https://github.com/${{ github.repository }}/tree/${{ github.ref_name }}/${{ env.MODULE_PATH }}/examples/secure-private-endpoint)
          - [Multi-Region](https://github.com/${{ github.repository }}/tree/${{ github.ref_name }}/${{ env.MODULE_PATH }}/examples/multi-region)
          
          ### 📝 Changelog
          EOF
          
          # Extract changelog for this version if available
          if [[ -f "${{ env.MODULE_PATH }}/CHANGELOG.md" ]]; then
            # Try to extract section for this version
            awk "/## \[?v?${VERSION}\]?/{flag=1; next} /## \[?v?[0-9]+\.[0-9]+\.[0-9]+\]?/{flag=0} flag" "${{ env.MODULE_PATH }}/CHANGELOG.md" >> release_notes.md || echo "See [CHANGELOG.md](https://github.com/${{ github.repository }}/tree/${{ github.ref_name }}/${{ env.MODULE_PATH }}/CHANGELOG.md) for details." >> release_notes.md
          else
            echo "Initial release of the Azure Storage Account module." >> release_notes.md
          fi
          
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: "Storage Account Module v${{ needs.validate-tag.outputs.version }}"
          body_path: release_notes.md
          draft: false
          prerelease: ${{ contains(needs.validate-tag.outputs.version, '-') }}
          generate_release_notes: true
          
      - name: Update Module Registry
        run: |
          # This step could update a module registry or documentation site
          # For now, we'll just log the release
          echo "✅ Module ${{ env.MODULE_NAME }} v${{ needs.validate-tag.outputs.version }} released!"
          echo "Release URL: ${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ github.ref_name }}"